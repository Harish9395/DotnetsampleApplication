pipeline:
  name: TestinDotNetapplication
  identifier: TestinDotNetapplication
  projectIdentifier: Test
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: github
        repoName: DotnetsampleApplication
        build: <+input>
  stages:
    - stage:
        name: Git Clone
        identifier: Git_Clone
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Build Docker Image
                  identifier: Build_Docker_Image
                  spec:
                    shell: Sh
                    command: |-
                      docker build -t harish2195/dockerwebapi:${BuildNumber} -f Dockerfile .
                      docker images
                      pwd
              - step:
                  type: Run
                  name: Push Docker image to Dockerhub
                  identifier: Push_Docker_image_to_Dockerhub
                  spec:
                    shell: Sh
                    command: |-
                      #docker login --username ${secrets.getValue("Dockerusername")} --password ${secrets.getvalue("Dockerpassword")}
                      docker login -u harish2195 -p ${DOCKER_PASSWORD}
                      docker push harish2195/dockerwebapi:${BuildNumber}
        variables:
          - name: BuildNumber
            type: Number
            description: ""
            required: true
            value: <+input>
          - name: DOCKER_PASSWORD
            type: Secret
            description: ""
            required: false
            value: Dockerpassword
    - stage:
        name: Deploy
        identifier: Deploy
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: TestingUI
          environment:
            environmentRef: Dev
            deployToAll: false
            infrastructureDefinitions:
              - identifier: EKS_deploy_dev
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: ShellScript_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |-
                          aws configure set aws_access_key_id AKIA5U3R675QNZZ2AJET
                          aws configure set aws_secret_access_key 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
                          kubectl get nodes
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
